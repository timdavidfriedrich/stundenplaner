FutureBuilder(
    
// Wait until [connectToFirebase] returns stream
future: firebaseConnect(),
builder: (BuildContext context, AsyncSnapshot<void> snapshot) {
    if (snapshot.connectionState == ConnectionState.waiting) {
    return Center(child: CircularProgressIndicator());
    } else {
    // When stream exists, use Streambilder to wait for data
    return StreamBuilder<DocumentSnapshot>(
        stream: database.getStundenplan(),
        builder: (BuildContext context,
            AsyncSnapshot<DocumentSnapshot> snapshot) {
        if (!snapshot.hasData) {
            return Center(child: CircularProgressIndicator());
        } else {
            Map<String, dynamic> items = snapshot.data.data();
            return DropdownButton(
                isExpanded: true,
                style: nice(),
                dropdownColor: t("body3"),
                underline: Container(
                margin: EdgeInsets.fromLTRB(0, 20, 0, 0),
                decoration: BoxDecoration(
                    border: Border(
                    bottom:
                        BorderSide(color: Colors.redAccent, width: 2),
                    ),
                ),
                ),
                icon: Icon(Icons.arrow_drop_down_sharp),
                iconDisabledColor: Colors.redAccent,
                iconEnabledColor: t("nice"),
                hint: Text("Fach wählen...",
                    style: TextStyle(color: t("nice"))),
                value: index == 99 ? null : index,
                items: (items == null)
                  ? DropdownMenuItem( 
                      value: 0,
                      child: Row(
                        children: [
                          Icon(Icons.search_off_outlined, color: t("niceIcons")),
                          SizedBox(
                            width: 10,
                          ),
                          Text("Oweia, nicht gefunden!")
                        ],
                      ),
                    );,
                  : items.map((i) => 
                    dropItem(i, items["fachList"].values.elementAt(i).toString())).toList()
                onChanged: (int i) {
                setState(() => index = i);
                index == 3
                    ? showDialog(
                        context: context,
                        builder: (BuildContext context) {
                            return NeuesFach();
                        })
                    : null;
                },
            );
            }
        },
    );
    }
}),

------------------------------------

DropdownButton(
        isExpanded: true,
        style: nice(),
        dropdownColor: t("body3"),
        underline: Container(
          margin: EdgeInsets.fromLTRB(0, 20, 0, 0),
          decoration: BoxDecoration(
            border: Border(
              bottom: BorderSide(color: Colors.redAccent, width: 2),
            ),
          ),
        ),
        icon: Icon(Icons.arrow_drop_down_sharp),
        iconDisabledColor: Colors.redAccent,
        iconEnabledColor: t("nice"),
        hint: Text("Fach wählen...", style: TextStyle(color: t("nice"))),
        value: index == 99 ? null : index,
        items: [
          DropdownMenuItem(
            value: 1,
            child: Row(
              children: [
                Icon(Icons.bookmark_outline_sharp, color: Colors.green),
                SizedBox(
                  width: 10,
                ),
                Text("Biologie")
              ],
            ),
          ),
          DropdownMenuItem(
            value: 3,
            child: Row(children: [
              Icon(Icons.add_sharp, color: Colors.redAccent),
              SizedBox(
                width: 10,
              ),
              Text("Fach hinzufügen")
            ]),
          ),
        ],
        onChanged: (int i) {
          setState(() => index = i);
          index == 3
              ? showDialog(
                  context: context,
                  builder: (BuildContext context) {
                    return NeuesFach();
                  })
              : null;
        },
      ),